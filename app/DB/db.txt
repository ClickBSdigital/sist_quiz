create database sist_quiz;
use sist_quiz;
drop database sist_quiz;
-- üéØ Estrutura do Banco de Dados para o Quiz
-- Tabela de Usu√°rios
SELECT * FROM usuarios;
üéØ Estrutura do Banco de Dados para o Quiz

-- Tabela de Usu√°rios
CREATE TABLE usuarios (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    email VARCHAR(100) UNIQUE NOT NULL,
    senha VARCHAR(255) NOT NULL,
    tipo ENUM('professor', 'aluno') NOT NULL,
    ativo TINYINT(1) DEFAULT 1, -- 1 para ativo, 0 para inativo
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

üìå Criar uma Tabela para Recupera√ß√£o de Senha (Opcional)
Se quiser um sistema de recupera√ß√£o de senha com tokens, podemos criar uma tabela separada para isso:

CREATE TABLE recuperacao_senha (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT NOT NULL,
    token VARCHAR(255) NOT NULL,
    expiracao DATETIME NOT NULL,
    usado TINYINT(1) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
);

-- Tabela de Eventos (Quizzes Criados pelos Professores)
CREATE TABLE eventos (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    professor_id INT NOT NULL,
    ativo TINYINT(1) DEFAULT 1, -- 1 para ativo, 0 para inativo
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (professor_id) REFERENCES usuarios(id) ON DELETE CASCADE
);

-- Tabela de Equipes (Times dos Alunos)
CREATE TABLE equipes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(100) NOT NULL,
    evento_id INT NOT NULL,
    ativo TINYINT(1) DEFAULT 1, -- 1 para ativo, 0 para inativo
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (evento_id) REFERENCES eventos(id) ON DELETE CASCADE
);

-- Tabela de Participantes (Alunos e suas Equipes)
CREATE TABLE participantes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT NOT NULL,
    equipe_id INT NOT NULL,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (equipe_id) REFERENCES equipes(id) ON DELETE CASCADE
);

-- Tabela de Perguntas
CREATE TABLE perguntas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    evento_id INT NOT NULL,
    enunciado TEXT NOT NULL,
    resposta_correta TEXT NOT NULL,
    resposta_errada1 TEXT NOT NULL,
    resposta_errada2 TEXT NOT NULL,
    resposta_errada3 TEXT NOT NULL,
    resposta_errada4 TEXT NOT NULL,
    ativo TINYINT(1) DEFAULT 1, -- 1 para ativo, 0 para inativo
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (evento_id) REFERENCES eventos(id) ON DELETE CASCADE
);

-- Tabela de Respostas dos Alunos
CREATE TABLE respostas (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT NOT NULL,
    pergunta_id INT NOT NULL,
    resposta_dada VARCHAR(255) NOT NULL,
    resultado ENUM('correto', 'errado') NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE,
    FOREIGN KEY (pergunta_id) REFERENCES perguntas(id) ON DELETE CASCADE
);

-- Tabela de Pontua√ß√£o das Equipes
CREATE TABLE pontuacoes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    participante_id INT NOT NULL,
    evento_id INT NOT NULL,
    pontos INT DEFAULT 0,
    UNIQUE KEY (participante_id, evento_id),
    FOREIGN KEY (participante_id) REFERENCES participantes(id),
    FOREIGN KEY (evento_id) REFERENCES eventos(id)
);

-- Tabela de Premia√ß√£o
CREATE TABLE premiacoes (
    id INT AUTO_INCREMENT PRIMARY KEY,
    equipe_id INT NOT NULL,
    fase INT NOT NULL,
    premio VARCHAR(255) NOT NULL,
    data_premiacao DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (equipe_id) REFERENCES equipes(id),
    UNIQUE KEY (equipe_id, fase) -- Evita duplica√ß√£o de premia√ß√£o na mesma fase
);

-- Tabela de Fases do Quiz
CREATE TABLE fases (
    id INT AUTO_INCREMENT PRIMARY KEY,
    evento_id INT NOT NULL,
    nome_fase VARCHAR(255) NOT NULL,
    descricao_fase TEXT NOT NULL,
    premio_fase VARCHAR(255) NOT NULL,
    ativo TINYINT(1) DEFAULT 1, -- 1 para ativo, 0 para inativo
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (evento_id) REFERENCES eventos(id) ON DELETE CASCADE
);

-- Tabela de Chat (Mensagens no Evento)
CREATE TABLE chat (
    id INT AUTO_INCREMENT PRIMARY KEY,
    evento_id INT NOT NULL,
    usuario_id INT NOT NULL,
    mensagem TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (evento_id) REFERENCES eventos(id) ON DELETE CASCADE,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
);

-- Tabela de Logs
CREATE TABLE logs (
    id INT AUTO_INCREMENT PRIMARY KEY,
    usuario_id INT NOT NULL,
    acao TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuarios(id) ON DELETE CASCADE
);

-- Inserir usu√°rios
INSERT INTO usuarios (nome, email, senha, tipo, ativo) 
VALUES 
('Jo√£o Silva', 'joao.silva@example.com', 'senha123', 'professor', 1),
('Maria Oliveira', 'maria.oliveira@example.com', 'senha123', 'aluno', 1),
('Pedro Santos', 'pedro.santos@example.com', 'senha123', 'aluno', 1);

-- Inserir eventos
INSERT INTO eventos (nome, professor_id, ativo) 
VALUES 
('Quiz de Matem√°tica', 1, 1),
('Quiz de Hist√≥ria', 1, 1);

-- Inserir equipes
INSERT INTO equipes (nome, evento_id, ativo) 
VALUES 
('Equipe A', 1, 1),
('Equipe B', 1, 1),
('Equipe C', 2, 1);

-- Inserir participantes (associar alunos √†s equipes)
INSERT INTO participantes (usuario_id, equipe_id) 
VALUES 
(2, 1), -- Maria Oliveira na Equipe A
(3, 1), -- Pedro Santos na Equipe A
(2, 2); -- Maria Oliveira na Equipe B

-- Inserir perguntas
INSERT INTO perguntas (evento_id, enunciado, resposta_correta, resposta_errada1, resposta_errada2, resposta_errada3, resposta_errada4, ativo) 
VALUES 
(1, 'Qual √© a soma de 2 + 2?', '4', '3', '5', '6', '7', 1),
(1, 'Qual √© o capital da Fran√ßa?', 'Paris', 'Londres', 'Roma', 'Berlim', 'Madrid', 1);

-- Inserir respostas dos alunos
INSERT INTO respostas (usuario_id, pergunta_id, resposta_dada, resultado) 
VALUES 
(2, 1, '4', 'correto'), -- Maria Oliveira acertou a primeira pergunta
(3, 1, '5', 'errado'); -- Pedro Santos errou a primeira pergunta

-- Inserir pontua√ß√£o das equipes
INSERT INTO pontuacoes (participante_id, evento_id, pontos) 
VALUES 
(1, 1, 10), -- Pontua√ß√£o para o participante (ID 1) no evento de ID 1
(2, 1, 15); -- Pontua√ß√£o para o participante (ID 2) no evento de ID 1

-- Inserir premia√ß√µes
INSERT INTO premiacoes (equipe_id, fase, premio) 
VALUES 
(1, 1, 'Medalha de Ouro'),
(2, 1, 'Medalha de Prata');

-- Inserir fases
INSERT INTO fases (evento_id, nome_fase, descricao_fase, premio_fase, ativo) 
VALUES 
(1, 'Fase 1', 'Fase inicial do quiz', 'Medalha de Ouro', 1),
(2, 'Fase 1', 'Primeira fase do quiz de Hist√≥ria', 'Medalha de Ouro', 1);

-- Inserir mensagens no chat
INSERT INTO chat (evento_id, usuario_id, mensagem) 
VALUES 
(1, 1, 'Boa sorte a todos!'),
(2, 2, 'Estou ansioso para o quiz de Hist√≥ria.');

-- Inserir logs
INSERT INTO logs (usuario_id, acao) 
VALUES 
(1, 'Criou o evento "Quiz de Matem√°tica"'),
(2, 'Participou do evento "Quiz de Hist√≥ria"');


Explica√ß√µes:
Usu√°rios: Inserimos tr√™s usu√°rios (um professor e dois alunos). As senhas devem ser inseridas com password_hash() em um ambiente real para garantir seguran√ßa.

Eventos: Criamos dois eventos, "Quiz de Matem√°tica" e "Quiz de Hist√≥ria".

Equipes: Inserimos tr√™s equipes, com uma delas associada a um evento.

Participantes: Associamos os alunos √†s equipes de acordo com a tabela de participantes.

Perguntas: Criamos duas perguntas para o evento de Matem√°tica.

Respostas: Inserimos respostas dos alunos para as perguntas.

Pontua√ß√£o: Adicionamos pontua√ß√£o para as equipes com base nos participantes.

Premia√ß√µes: Criamos premia√ß√µes para as equipes nas fases do quiz.

Fases: Criamos as fases de um quiz para cada evento.

Chat: Inserimos mensagens no chat de eventos.

Logs: Registramos a√ß√µes feitas pelos usu√°rios, como cria√ß√£o de eventos e participa√ß√£o.

Com esses inserts, voc√™ consegue popular as tabelas com dados iniciais para testar seu sistema.

-- ##########################################################
sistema de quiz, al√©m da classe Usuario, que j√° foi criada, as pr√≥ximas classes devem representar as outras entidades que voc√™ tem no banco de dados, como Evento, Equipe, Participante, Pergunta, Resposta, Pontua√ß√£o, Premia√ß√£o, Fase, Chat, Log, etc.

A sequ√™ncia correta de cria√ß√£o das classes segue a ordem das tabelas do banco de dados, j√° que as rela√ß√µes entre elas s√£o importantes para o correto funcionamento do sistema. Aqui est√° uma sugest√£o de sequ√™ncia:

1. Classe Usuario
J√° criada. Representa os usu√°rios do sistema (professores e alunos).

2. Classe Evento
Representa um quiz criado por um professor.

3. Classe Equipe
Representa as equipes dos alunos dentro de um evento.

4. Classe Participante
Representa o relacionamento entre os alunos e as equipes. Um aluno pode pertencer a v√°rias equipes.

5. Classe Pergunta
Representa as perguntas de cada evento, associadas ao quiz.

6. Classe Resposta
Representa as respostas dadas pelos alunos √†s perguntas. Essa classe tamb√©m vai armazenar o resultado, se a resposta foi correta ou errada.

7. Classe Pontua√ß√£o
Representa a pontua√ß√£o acumulada pelas equipes com base nas respostas corretas de seus membros.

8. Classe Premia√ß√£o
Representa os pr√™mios que as equipes ganham ao avan√ßarem nas fases ou alcan√ßarem pontua√ß√µes espec√≠ficas.

9. Classe Fase
Representa as fases de um evento de quiz, incluindo a descri√ß√£o e pr√™mios das fases.

10. Classe Chat
Representa as mensagens enviadas pelos usu√°rios durante um evento.

11. Classe Log
Representa as a√ß√µes realizadas no sistema para auditoria, como registros de quando um usu√°rio faz algo importante (ex: cria√ß√£o de quiz, envio de resposta).

Ordem Sugerida de Cria√ß√£o das Classes:
Usuario.php (J√° criada) crud ok

Evento.php (J√° criada)

Equipe.php (J√° criada)

Participante.php (J√° criada)

Pergunta.php (J√° criada)

Resposta.php (J√° criada)

Pontuacao.php (J√° criada)

Premiacao.php (J√° criada)

Fase.php (J√° criada)

Chat.php (J√° criada)

Log.php (J√° criada)


üìÅ Estrutura do Seu Projeto

/seu_projeto  
‚îÇ‚îÄ‚îÄ /app                # Pasta principal da aplica√ß√£o  
‚îÇ   ‚îú‚îÄ‚îÄ /assets         # Arquivos est√°ticos (CSS, JS, imagens)  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /css        # Estilos CSS  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /js         # Scripts JavaScript  
‚îÇ   ‚îú‚îÄ‚îÄ /classes        # Classes PHP  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Usuario.php # Classe para manipular usu√°rios  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ Game.php    # Classe para gerenciar games  
‚îÇ   ‚îú‚îÄ‚îÄ /DB             # Banco de dados  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ conexao.php # Conex√£o com o banco  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ seeds.sql   # Dados iniciais para popular o BD  
‚îÇ   ‚îú‚îÄ‚îÄ /pages          # P√°ginas visuais do sistema  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ login.php          # P√°gina de login  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ painel_professor.php # Painel do professor  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ painel_aluno.php  # Painel do aluno  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ quiz.php          # P√°gina para responder quiz  
‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ranking.php       # P√°gina de ranking de alunos  
‚îÇ   ‚îú‚îÄ‚îÄ /uploads        # Arquivos enviados pelos usu√°rios  
‚îÇ‚îÄ‚îÄ /public             # Arquivos acess√≠veis diretamente  
‚îÇ   ‚îú‚îÄ‚îÄ index.php       # P√°gina inicial  
‚îÇ   ‚îú‚îÄ‚îÄ .htaccess       # Regras de acesso  
‚îÇ‚îÄ‚îÄ /controllers        # Regras de neg√≥cio (processamento)  
‚îÇ   ‚îú‚îÄ‚îÄ loginController.php # Processa login  
‚îÇ   ‚îú‚îÄ‚îÄ gameController.php  # Gerencia games  
‚îÇ   ‚îú‚îÄ‚îÄ usuarioController.php # Gerencia usu√°rios  
‚îÇ‚îÄ‚îÄ /config             # Arquivos de configura√ß√£o  
‚îÇ   ‚îú‚îÄ‚îÄ sessao.php      # Controle de sess√£o  
‚îÇ   ‚îú‚îÄ‚îÄ constantes.php  # Defini√ß√£o de constantes  
‚îÇ‚îÄ‚îÄ README.md           # Documenta√ß√£o do projeto  

‚úÖ Explica√ß√£o de Cada Pasta
üìÅ app/
Pasta principal onde est√° a aplica√ß√£o.

assets/ ‚Üí Armazena os arquivos est√°ticos (CSS, JS e imagens).

classes/ ‚Üí Cont√©m as classes do sistema para organizar o c√≥digo.

DB/ ‚Üí Conex√£o com o banco e scripts SQL.

pages/ ‚Üí Todas as p√°ginas PHP da aplica√ß√£o, separadas por tipo.

uploads/ ‚Üí Para armazenar arquivos enviados pelos usu√°rios.

üìÅ public/
Pasta p√∫blica do sistema, acessada pelo navegador.

index.php ‚Üí P√°gina inicial que redireciona usu√°rios logados.

.htaccess ‚Üí Seguran√ßa e roteamento de URLs.

üìÅ controllers/
Cont√©m os arquivos PHP que processam requisi√ß√µes.

loginController.php ‚Üí Processa login e autentica√ß√£o.

gameController.php ‚Üí Gerencia games e eventos.

usuarioController.php ‚Üí Cadastro, edi√ß√£o e exclus√£o de usu√°rios.

üìÅ config/
Armazena arquivos de configura√ß√£o do sistema.

sessao.php ‚Üí Inicia sess√£o e protege p√°ginas restritas.

constantes.php ‚Üí Define vari√°veis globais, como URL do site.

üî• Vantagens dessa Estrutura
‚úÖ C√≥digo mais organizado e modular ‚Üí Facilita manuten√ß√£o e escalabilidade.
‚úÖ Separa l√≥gica e apresenta√ß√£o ‚Üí controllers cuida da l√≥gica, pages exibe os dados.
‚úÖ Seguran√ßa ‚Üí A conex√£o com o banco e uploads est√£o fora do public/, protegendo os dados.

üöÄ Conclus√£o
Sua estrutura est√° bem planejada! Apenas ajustei para manter um padr√£o MVC simplificado. 


--------------------------------

üìÑ Arquivo .htaccess

# Habilitar Rewrite Engine para URLs amig√°veis
RewriteEngine On

# Redirecionar todas as requisi√ß√µes para index.php, exceto arquivos existentes
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php?url=$1 [QSA,L]

# Bloquear acesso direto a pastas sens√≠veis
<FilesMatch "^(conexao\.php|config\.php|constantes\.php|sessao\.php)">
    Order Deny,Allow
    Deny from all
</FilesMatch>

# Proteger diret√≥rios sens√≠veis
<Directory "/app/DB">
    Order Deny,Allow
    Deny from all
</Directory>

# Impedir listagem de diret√≥rios
Options -Indexes

# Proteger uploads para n√£o executarem PHP
<Directory "/app/uploads">
    <FilesMatch "\.(php|php5|sh|pl|cgi|exe)$">
        Order Deny,Allow
        Deny from all
    </FilesMatch>
</Directory>

# Definir index.php como p√°gina inicial
DirectoryIndex index.php

# Prote√ß√£o contra hotlinking de imagens
RewriteCond %{HTTP_REFERER} !^$
RewriteCond %{HTTP_REFERER} !^https://(www\.)?seusite\.com/ [NC]
RewriteRule \.(jpg|jpeg|png|gif)$ - [F]

# Configura√ß√£o de cache para melhorar desempenho
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType image/jpg "access plus 1 year"
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType text/css "access plus 1 month"
    ExpiresByType application/javascript "access plus 1 month"
    ExpiresByType text/javascript "access plus 1 month"
    ExpiresByType application/x-javascript "access plus 1 month"
</IfModule>

# Compress√£o Gzip para otimizar carregamento
<IfModule mod_deflate.c>
    AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css text/javascript application/javascript application/json
</IfModule>
üî• O que esse .htaccess faz?
‚úÖ Protege arquivos sens√≠veis ‚Üí Bloqueia acesso a conexao.php, config.php etc.
‚úÖ Impede listagem de diret√≥rios ‚Üí Evita que usu√°rios vejam arquivos internos.
‚úÖ Protege a pasta uploads/ ‚Üí N√£o permite execu√ß√£o de scripts maliciosos.
‚úÖ Habilita URLs amig√°veis ‚Üí Remove .php e permite acessar /pagina ao inv√©s de /pagina.php.
‚úÖ Melhora a performance ‚Üí Ativa cache e compress√£o Gzip.
‚úÖ Impede hotlinking de imagens ‚Üí Evita que outros sites roubem suas imagens.